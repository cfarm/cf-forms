@import (less) '../../cf-grid/src/cf-grid.less';
@import (less) '../../cf-core/src/cf-core.less';
@import (less) '../../cf-buttons/src/cf-buttons.less';
@import (less) '../../cf-icons/src/cf-icons.less';

/* ==========================================================================
   Capital Framework
   Form Element Styling
   ========================================================================== */

/* topdoc
  name: Theme variables
  family: cf-forms
  notes:
    - "The following color and sizing variables are exposed, allowing you to
       easily override them before compiling."
  patterns:
  - name: Colors
    codenotes:
      - |
        @input-error
        @input-warning
        @input-success
        @input-disabled
        @input-inset-bg
        @input-inset-selected
        @checkbox-border
        @checkbox-checked-border
        @checkbox-border-disabled
        @checkbox-bg-disabled
        @input-active-bg
  - name: Sizing
    codenotes:
      - |
        @input__super-font-size
  tags:
  - cf-forms
  - less
*/

// Color variables

// .error
@input-error:                   #ea130b;

// warning
@input-warning:                 #ffb108;

// .success
@input-success:                 #009d38;

// .disabled
@input-disabled:                #cdb5cd;

// .form-l-inset_container
@input-inset-bg:                #ccc002;

// .form-l-inset_container.is-checked
@input-inset-selected:          #0be3f5;

// checkbox, radio buttons
@checkbox-border:               #9be3f5;
@checkbox-checked-border:       #0000ff;
@checkbox-border-disabled:      desaturate(#0000ff, 10%);
@checkbox-bg-disabled:          desaturate(#110aaf, 50%);
@input-active-bg:               lighten(#110aaf, 30%);

// Sizing variables

// .input__super
@input__super-font-size:        18px;


/* topdoc
  name: Form labels
  family: cf-forms
  patterns:
    - name: Label header
      markup: |
        <label class="form-label-header">
            Form label header
        </label>
  tags:
    - cf-forms
*/

.form-label-header {
    .h5();
    margin-bottom: unit(10px / @font-size, em);
}


/* topdoc
  name: Super input
  family: cf-forms
  patterns:
    - name: .input__super
      markup: |
        <input class="input__super" type="text" value="Super input" title="Test input"></input>
        <button class="btn btn__super">Super</button>
      notes:
        - "An input that matches the height of a super button."
  tags:
    - cf-forms
*/

.input__super {
    &[type="text"],
    &[type="search"],
    &[type="email"],
    &[type="url"],
    &[type="tel"],
    &[type="number"] {
        padding: unit( 10px / @input__super-font-size, em );
        font-size: unit( @input__super-font-size / @base-font-size-px, em );
    }
}


/* topdoc
    name: Input states
    family: cf-forms
    patterns:
    - name: Error state
      codenotes:
        - .error
      notes:
        - "See the 'Form icons' section below for guidance on adding icons to
           states."
      markup: |
        <input class="error" type="text" value="Invalid input" title="Test input">
    - name: Warning state
      codenotes:
        - .warning
      notes:
        - "See the 'Form icons' section below for guidance on adding icons to
           states."
      markup: |
        <input class="warning" type="text" value="Invalid input" title="Test input">
    - name: Success state
      codenotes:
        - .success
      notes:
        - "See the 'Form icons' section below for guidance on adding icons to
           states."
      markup: |
        <input class="success" type="text" value="Validated input" title="Test input">
    - name: Disabled state
      codenotes:
        - .disabled
      markup: |
        <input class="disabled" disabled="true" autocomplete="off" type="text" value="Validated input" title="Test input">
    tags:
    - cf-forms
*/

input[type="text"],
input[type="search"],
input[type="email"],
input[type="url"],
input[type="tel"],
input[type="number"],
select[multiple],
textarea {
    &.error {
        border: 1px solid @input-error;
        outline: 1px solid @input-error;
    }
    &.warning {
        border: 1px solid @input-warning;
        outline: 1px solid @input-warning;
    }
    &.success {
        border: 1px solid @input-success;
        outline: 1px solid @input-success;
    }    
    &.disabled {
        background-color: @input-disabled;
    }
}


/* topdoc
    name: Form icons
    family: cf-forms
    patterns:
    - name: Form input icons
      notes:
        - "Form input icons add small positioning tweaks to Capital Framework
          icons."
      markup: |
        <input type="text" value="" title="Test input">
        <span class="cf-form_input-icon cf-icon cf-icon-email"></span>
    - name: Form input error icon
      notes:
        - "The icon must be placed directly after the form input in the markup
          and the input must use the 'error' class."
        - "For invalid fields only use the alert role to call attention to
           fields that need immediate attention:
           https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_alert_role"
      markup: |
        <input class="error" type="text" value="Invalid input" title="Test input">
        <span class="cf-form_input-icon cf-icon cf-icon-delete-round" role="alert"></span>
    - name: Form input warning icon
      notes:
        - "The icon must be placed directly after the form input in the markup
          and the input must use the 'warning' class."
        - "For invalid fields only use the alert role to call attention to
           fields that need immediate attention:
           https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_alert_role"
      markup: |
        <input class="warning" type="text" value="Invalid input" title="Test input">
        <span class="cf-form_input-icon cf-icon cf-icon-error-round" role="alert"></span>
    - name: Form input success icon
      notes:
        - "The icon must be placed directly after the form input in the markup
          and the input must use the 'error' class."
        - "For valid inputs only use the alert role to indicate that a
           previously invalid input is now valid:
           https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_alert_role"
      markup: |
        <input class="success" type="text" value="Validated input" title="Test input">
        <span class="cf-form_input-icon cf-icon cf-icon-approved-round"></span>
    tags:
    - cf-forms
*/

@cf-forms_input-icon-class: cf-form_input-icon;

.@{cf-forms_input-icon-class} {
    @font-size: 20px;

    position: relative;
    top: unit(6px / @font-size, em);
    margin-left: unit(4px / @font-size, em);
    font-size: unit(@font-size / @base-font-size-px, em);
}

.error + .@{cf-forms_input-icon-class} {
    color: @input-error;
}

.warning + .@{cf-forms_input-icon-class} {
    color: @input-warning;
}

.success + .@{cf-forms_input-icon-class} {
    color: @input-success;
}


/* topdoc
  name: Form group
  family: cf-forms
  notes:
    - "A form group is recommended when you need to provide spacing between form
       elements and between groups of form elements."
  codenotes:
    - |
      Pattern structure
      -----------------
      .form-group
        .form-group_item
  patterns:
    - name: .form-group (block)
      markup: |
        <div class="form-group">
            <div class="form-group_item">
                <input type="text" title="Test input">
            </div>
            <div class="form-group_item">
                <input type="text" title="Test input">
            </div>
        </div>
        <div class="form-group">
            <div class="form-group_item">
                <input type="text" title="Test input">
            </div>
            <div class="form-group_item">
                <input type="text" title="Test input">
            </div>
        </div>
        <div class="form-group">
            <div class="form-group_item">
                <input type="text" title="Test input">
            </div>
            <div class="form-group_item">
                <input type="text" title="Test input">
            </div>
        </div>
      codenotes:
        - |
          .form-group
      notes:
        - "Provides sizeable margins between groups of form elements."
    - name: .form-group_item (element)
      markup: |
        <div class="form-group_item">
            <input type="text" title="Test input">
        </div>
        <div class="form-group_item">
            <input type="text" title="Test input">
        </div>
        <div class="form-group_item">
            <input type="text" title="Test input">
        </div>
      notes:
        - "Provides subtle margins between form elements within the same group."
    - name: Real world example
      markup: |
        <div class="form-group">
            <label class="form-label-header">Form group</label>
            <div class="form-group_item">
                <input type="text" value="Form group item" title="Test input">
            </div>
            <div class="form-group_item">
                <input type="text" value="Form group item" title="Test input">
            </div>
        </div>
        <div class="form-group">
            <label class="form-label-header">Form group</label>
            <div class="form-group_item">
                <input type="text" value="Form group item" title="Test input">
            </div>
            <div class="form-group_item">
                <input type="text" value="Form group item" title="Test input">
            </div>
        </div>
  tags:
    - cf-forms
*/

.form-group + .form-group {
    margin-top: unit(30px / @base-font-size-px, em);
}

.form-group_item + .form-group_item {
    margin-top: unit(15px / @base-font-size-px, em);
}


/* topdoc
  name: Input with button
  family: cf-forms
  patterns:
    - name: Default input and button
      markup: |
        <div class="input-with-btn">
            <div class="input-with-btn_input">
                <input type="text" title="Test input">
            </div>
            <div class="input-with-btn_btn">
                <button class="btn">Search</button>
            </div>
        </div>
    - name: Super input and button
      markup: |
        <div class="input-with-btn">
            <div class="input-with-btn_input">
                <input class="input__super" type="text" title="Test input">
            </div>
            <div class="input-with-btn_btn">
                <button class="btn btn__super">Search</button>
            </div>
        </div>
  tags:
    - cf-forms
*/

.input-with-btn {

    .respond-to-min(480px, {
        .grid_nested-col-group();
    });

    &_input {
        margin-bottom: unit(15px / @base-font-size-px, em);
        .respond-to-min(480px, {
            .grid_column(9);
            border-right-width: 0;
        });
        .respond-to-min(960px, {
            .grid_column(10);
            border-right-width: 0;
        });

        input {
            box-sizing: border-box;
            width: 100%;
        }
    }

    &_btn {
        margin-bottom: unit(15px / @base-font-size-px, em);

        .respond-to-min(480px, {
            .grid_column(3);
        });
        .respond-to-min(960px, {
            .grid_column(2);
        });

        .btn {
            box-sizing: border-box;
            width: 100%;
        }

        .btn__super {
            padding-left: unit(15px / @super-btn-font-size, em);
            padding-right: unit(15px / @super-btn-font-size, em);
        }
    }

}


/* topdoc
  name: Button inside input
  family: cf-forms
  patterns:
    - name: Default button inside of an default input
      markup: |
        <div class="btn-inside-input">
            <input type="text"
                   value="This is some really long text to make sure that the button doesn't overlap the content in such a way that this input becomes unusable." title="Test input">
            <button class="btn btn__link btn__secondary">
                Clear
                <span class="cf-icon cf-icon-delete"></span>
            </button>
        </div>
    - name: Super button inside of a super input
      markup: |
        <div class="btn-inside-input">
            <input class="input__super"
                   type="text"
                   value="This is some really long text to make sure that the button doesn't overlap the content in such a way that this input becomes unusable." title="Test input">
            <button class="btn btn__super btn__link btn__secondary">
                Clear
                <span class="cf-icon cf-icon-delete"></span>
            </button>
        </div>
  tags:
    - cf-forms
*/

.btn-inside-input {

    position: relative;

    input[type="text"],
    input[type="search"],
    input[type="email"],
    input[type="url"],
    input[type="tel"],
    input[type="number"] {
        box-sizing: border-box;
        width: 100%;
        padding-right: unit(65px / @btn-font-size, em);

        &.input__super {
            padding-right: unit(90px / @super-btn-font-size, em);
        }
    }

    .btn {
        .u-link__no-border();
        position: absolute;
        right: unit(15px / @btn-font-size, em);
        top: 0;

        &__super {
            right: unit(15px / @super-btn-font-size, em);
        }

        /* pa11y fails unless the background color is explicitly set */
        &__link.btn__secondary {
            background-color: #fff;
        }
    }

}

/* topdoc
  name: Checkboxes and radio buttons
  family: cf-forms
  notes:
    - "CSS for checkboxes and radio buttons requires following a specific HTML structure for each type of input, otherwise the styles will not be properly applied."
    - "You MUST wrap your input.cf-input in a label."
    - "Remember to use 'for' and 'id' attributes so that selected/checked styles function properly."
    - "Remember to use the same 'name' attribute for each set of radio buttons."
  patterns:
    - name: Checkbox
      markup: |
        <label class="cf-input_label">
            <input class="cf-input cf-input_checkbox" type="checkbox" name="option1" value="Option 1">
            Option 1
        </label>
        <br>
        <label class="cf-input_label">
            <input class="cf-input cf-input_checkbox" type="checkbox" name="option2" value="Option 2">
            Option 2
        </label>
      codenotes:
        - |
          Structural cheat sheet:
          -----------------------
          label.cf-input_label
            input[type=checkbox].cf-input
      notes:
        - "Use the markup structure above to add checkbox .cf-input elements."
    - name: Radio buttons
      markup: |
        <label class="cf-input_label" for"yes">
            <span class="cf-input_text">Yes</span>
            <input class="cf-input cf-input_hidden" type="radio" name="cf-input-example_default" id="yes">
            <span class="cf-input_radio"></span>
        </label>
        <br>
        <label class="cf-input_label" for="no">
            <span class="cf-input_text">No</span>
            <input class="cf-input cf-input_hidden" type="radio" name="cf-input-example_default" id="no">
            <span class="cf-input_radio"></span>
        </label>
      codenotes:
        - |
          Structural cheat sheet:
          -----------------------
          label.cf-input_label
            span.cf-input_text
            input[type=radio].cf-input.cf-input_hidden
            span.cf-input_radio
      notes:
        - "Use the markup structure above to add radio button .cf-input elements."
        - "Radio buttons require extra markup to apply custom styles."
  tags:
    - cf-forms
*/

.cf-input {

    @input-width-px: 20px;
    @input-width: unit(@input-width-px / @base-font-size-px, em);

    // Hide the real input by using absolute positioning to layer a styled div
    // over it.
    &_hidden {
        position: absolute;
        top: 4px;
        left: 4px;
        z-index: 0;
        // Use this to try and make the input as small as possible so that it
        // doesn't stick out from underneath .input_checkbox or .input_radio.
           -moz-appearance: none;
        -webkit-appearance: none;

    }

    &_label {
        position: relative;
        z-index: 2;
        padding-left: unit((@input-width-px + 2px) / @base-font-size-px, em);
        margin-right: unit(6 / @base-font-size-px, em);
        line-height: 1;
    }

    &_text {
        display: inline-block;
        // Eyeballed to 10px between the checkbox and the label text.
        padding-left: unit(8 / @base-font-size-px, em);
        line-height: unit((@input-width-px + 2px) / @base-font-size-px);
    }

    &_checkbox,
    &_radio {
        :hover ~ &,
        :focus ~ &,
        .focus ~ & {
            border-color: @input-bg;
            outline: 2px solid @input-border-focus;
        }
        input:checked ~ &,
        input:checked + label + &
        {
            background-color: @input-border-focus;
            border: 3px solid @input-bg;
            outline: 1px solid @input-border-focus;
        }
    }

    // The .focus class is only included for documentation demos and should not be used in production.
    &_checkbox {
        position: relative;
        top: 4px;
        left: 4px;
        width: 20px;
        height: 20px;
        -webkit-appearance: none;
        background-color: white;
        border: 1px solid @checkbox-border;
        &:checked {
            border-color: @checkbox-checked-border;
            outline: 1px solid @checkbox-checked-border;
            .cf-icon();
            .cf-icon-approved();
            &:before {
                position: absolute;
                top: 1px;
                left: 2px;
            }
        }
        &:hover,
        &:focus,
        &.focus {
            border: 1px solid @input-border-focus;
            cursor: pointer;
        }
        &[disabled=true] {
            border-color: @checkbox-border-disabled;
            background-color: @checkbox-bg-disabled;
            cursor: default;
        }
    }


    // Hide the real input by using absolute positioning to layer a styled div
    // over it.
    // &_checkbox,
    &_radio {
        box-sizing: border-box;
        position: absolute;
            top: 1px;
            left: 1px;
        z-index: 1;
        width: @input-width;
        height: @input-width;
        background: @input-bg;
        border-radius: 100%;
        // box-shadow is being used instead of outline because outline
        // does not respect border-radius.
        box-shadow: 0px 0px 0px 1px @checkbox-border;
        outline: none;
        // IE8 does not support border-radius so we will degrade to the default browser radio button style.
        .lt-ie9 & {
            display: none !important;
        }
        input:checked ~ &,
        input:checked + label + & {
            // box-shadow is being used instead of outline because outline
            // does not respect border-radius.
            outline: none;
            box-shadow: 0px 0px 0px 1px @input-border-focus;
        }
        :hover ~ &,
        :focus ~ &,
        .focus ~ & {
            // box-shadow is being used instead of outline because outline
            // does not respect border-radius.
            outline: none;
            box-shadow: 0px 0px 0px 2px @input-border-focus;
        }
        [disabled="true"] ~ & {
          box-shadow: 0px 0px 0px 1px @checkbox-border-disabled;
          background-color: @checkbox-bg-disabled;
          cursor: default;
        }
    }
}


/* topdoc
  name: Form layouts
  family: cf-forms
  patterns:
    - name: Form one-half columns
      markup: |
        <div class="form-l">
            <div class="form-l_col form-l_col-1-3">
                Form layout column 1
            </div>
            <div class="form-l_col form-l_col-1-2">
                Form layout column 2
            </div>
        </div>
      codenotes:
        - |
          Structural cheat sheet:
          -----------------------
          .form-l
            .form-l_col.form-l_col-1-2
    - name: Form one-third columns
      markup: |
        <div class="form-l">
            <div class="form-l_col form-l_col-1-3">
                Form layout column 1
            </div>
            <div class="form-l_col form-l_col-1-3">
                Form layout column 2
            </div>
            <div class="form-l_col form-l_col-1-3">
                Form layout column 3
            </div>
        </div>
      codenotes:
        - |
          Structural cheat sheet:
          -----------------------
          .form-l
            .form-l_col.form-l_col-1-3
      notes:
        - ".form-l_col-1-3 elements are stacked for small screens. When the
          viewport reaches 600px they transform into columns with one half the
          width of the container. When the viewport reaches 768px their width
          updates to one third of the container."
    - name: "Form layout modifier: flush"
      markup: |
        <div class="form-l form-l__flush">
            <div class="form-l_col form-l_col-1-3">
                Form layout column 1
            </div>
            <div class="form-l_col form-l_col-1-3">
                Form layout column 2
            </div>
            <div class="form-l_col form-l_col-1-3">
                Form layout column 3
            </div>
        </div>
      codenotes:
        - .form-l.form-l__flush
      notes:
        - "Form layout columns have left and right gutters. If you want the
          first and last column in each row to sit flush left/right
          respectively then use the .form-l__flush modifier."
    - name: Form layout inset
      markup: |
        <div class="form-l form-l__flush">
            <div class="form-l_col form-l_col-1-2 form-l-inset">
                <div class="form-l-inset_container">
                    <input class="cf-input cf-input_hidden" type="radio" name="cf-input-example_default-inset" id="cf-input-example_default-inset">
                    <label class="cf-input_label" for="cf-input-example_default-inset">
                        <span class="cf-input_text">Yes</span>
                    </label>
                    <span class="cf-input_radio"></span>
                </div>
            </div>
            <div class="form-l_col form-l_col-1-2 form-l-inset">
                <div class="form-l-inset_container">
                    <input class="cf-input cf-input_hidden" type="radio" name="cf-input-example_default-inset" id="cf-input-example_default-inset2">
                    <label class="cf-input_label" for="cf-input-example_default-inset2">
                        <span class="cf-input_text">No</span>
                    </label>
                    <span class="cf-input_radio"></span>
                </div>
            </div>
        </div>
      codenotes:
        - |
          Structural cheat sheet:
          -----------------------
          .form-l-inset
            .form-l-inset_container
      notes:
        - ".form-l-inset_container elements have larger target areas for easier user interaction."
  tags:
    - cf-forms
*/

.form-l {
    &__flush {
        .respond-to-min(1060px, {
            .grid_nested-col-group();
        });
    }
    &__float {
        .respond-to-min(1060px, {
            .u-clearfix();
            & .form-l_col {
                display: block;
                float: left;
                margin-right: 0;
            }
        });
    }
}

.form-l_col {
    // Eyeballed to 30px considering line-height.
    margin-bottom: unit(30px / @base-font-size-px, em);
}

.form-l_col-1-2 {
    .respond-to-min(1060px, {
        .grid_column(6);
    });
}

.form-l_col-1-3 {
    .respond-to-min(1060px, {
        .grid_column(4);
    });
}

.form-l_col-2-3 {
    .respond-to-min(1060px, {
        .grid_column(8);
    });
}

.form-l_col-1 {
    .respond-to-min(1060px, {
        .grid_column(12);
    });
}

// The .focus & .selected classes are only included for documentation demos and should not be used in production.
.form-l-inset {
    // The default margin between two columns is 30px.
    // The following rules shrink it to 5px for the insets.
    border-right-width: 2.5px;
    + .form-l-inset { border-left-width: 2.5px; }
    &:last-child { border-right-width: 15px; }

    .form-l-inset_container {
        padding: 0;
        position: relative;
        background: @input-inset-bg;

        .cf-input_label {
            margin: 0;
            padding: unit((@grid_gutter-width / 2) / @base-font-size-px, em)
                 unit((@grid_gutter-width / 2) / @base-font-size-px, em) 
                 unit((@grid_gutter-width / 1.75) / @base-font-size-px, em);
        }

        .cf-input_text {
            margin-left: unit(@grid_gutter-width / @base-font-size-px, em);
        }

        .cf-input_radio, 
        .cf-input_checkbox {
            position: absolute;
            top: unit((@grid_gutter-width / 1.75) / @base-font-size-px, em);
            top: 15px;
            left: 15px;
            z-index: 3;
        }

        &:hover,
        &:focus,
        &.focus {
            .cf-input_checkbox,
            .cf-input_radio {
                border-color: @input-bg;
                outline: 2px solid @input-border-focus;    
            }
            .cf-input_radio {
                // box-shadow is being used instead of outline because outline
                // does not respect border-radius.
                outline: none;
                box-shadow: 0px 0px 0px 2px @input-border-focus;
                // Older IE does not support border-radius or box-shadow it's ok to
                // use outline here.
                .lt-ie9 & {
                    outline: 2px solid @input-border-focus;
                }
            }
        }

        &.selected .cf-input_label,
        &.focus .cf-input_label,
        input:checked ~ .cf-input_label +  {
            outline: 2px solid @input-border-focus;
        }
        &.selected .cf-input_label,
        input:checked ~ .cf-input_label {
            background-color: @input-inset-selected;
        }
    }
}


/* topdoc
  name: EOF
  eof: true
*/
