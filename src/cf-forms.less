@import (less) '../../cf-grid/src/cf-grid.less';
@import (less) '../../cf-core/src/cf-core.less';
@import (less) '../../cf-buttons/src/cf-buttons.less';
@import (less) '../../cf-icons/src/cf-icons.less';
@import (less) '../../cf-typography/src/cf-typography.less';

/* ==========================================================================
   Capital Framework
   Form Element Styling
   ========================================================================== */

/* topdoc
  name: Theme variables
  family: cf-forms
  notes:
    - "The following color and sizing variables are exposed, allowing you to
       easily override them before compiling."
  patterns:
  - name: Colors
    codenotes:
      - |
        @input-error
        @input-warning
        @input-success
        @input-disabled
        @input-inset-bg
        @input-inset-selected
        @checkbox-border
        @checkbox-checked-border
        @checkbox-border-disabled
        @checkbox-bg-disabled
        @input-active-bg
        @input-range-bg
        @input-range-border
        @input-range-handle
  - name: Sizing
    codenotes:
      - |
        @input__super-font-size
  tags:
  - cf-forms
  - less
*/

// Color variables

// .error
@input-error:                   #eca87a;

// .warning
@input-warning:                 #eca87a;

// .success
@input-success:                 #905c8a;

// .disabled
@input-disabled:                #cdb5cd;

// .form-label-helper-text
@label-helper:                  #ffb108;

// .form-l-inset_container
@input-inset-bg:                #ccc002;

// .form-l-inset_container.is-checked
@input-inset-selected:          #0be3f5;

// checkbox, radio buttons
@checkbox-border:               #9be3f5;
@checkbox-checked-border:       #0000ff;
@checkbox-border-disabled:      desaturate(#0000ff, 10%);
@checkbox-bg-disabled:          desaturate(#110aaf, 50%);
@input-active-bg:               lighten(#110aaf, 30%);

// .disabled
@input-disabled:                #00ee38;

// range input
@input-range-bg:                @gray-80;
@input-range-border:            @gray-50;
@input-range-handle:            @gray-10;

// Sizing variables

// .input__super
@input__super-font-size:        18px;


/* topdoc
  name: Form labels
  family: cf-forms
  patterns:
    - name: Label header
      markup: |
        <label class="form-label-header">
            Form label header
        </label>
    - name: Form label helper text
      markup: |
        <label class="form-label-helper-text">
            Form label helper text
        </label>
  tags:
    - cf-forms
*/

.form-label-header {
    .h4();
    margin-bottom: unit(10px / @font-size, em);
}

.form-label-helper-text {
    .micro-copy();
    color: @label-helper;
    margin-bottom: unit(10px / 14px, em);
}

.form-label-error {
    .error + & {
      margin-top: unit(15px / 16px, em);      
    }  
}


/* topdoc
  name: Super input
  family: cf-forms
  patterns:
    - name: .input__super
      markup: |
        <input class="input__super" type="text" value="Super input" title="Test input"></input>
        <button class="btn btn__super">Super</button>
      notes:
        - "An input that matches the height of a super button."
  tags:
    - cf-forms
*/

.input__super {
    &[type="text"],
    &[type="search"],
    &[type="email"],
    &[type="url"],
    &[type="tel"],
    &[type="number"] {
        padding: unit( 10px / @input__super-font-size, em );
        font-size: unit( @input__super-font-size / @base-font-size-px, em );
    }
}


/* topdoc
    name: Input states
    family: cf-forms
    patterns:
    - name: Error state
      codenotes:
        - .error
      markup: |
        <input class="error" type="text" value="Invalid input" title="Test input">
    - name: Disabled state
      codenotes:
        - .disabled
      markup: |
        <input class="disabled" disabled="true" autocomplete="off" type="text" value="Validated input" title="Test input">
    tags:
    - cf-forms
*/

input[type="text"],
input[type="search"],
input[type="email"],
input[type="url"],
input[type="tel"],
input[type="number"],
select[multiple],
textarea {
    &.error {
        border: 1px solid @input-error;
        outline: 1px solid @input-error;
    }
    &.disabled {
        border-width: 2px;
        background-color: @input-disabled;
    }
}

/* topdoc
    name: Form icons
    family: cf-forms
    patterns:
    - name: Form input error icon
      notes:
        - "The icon must be inside a label element with the 'form-label-error' class."
      markup: |
        <input class="error" type="text" value="" id="form-input-error">
        <label class="form-label-error" for="form-input-error">
            <span class="cf-form_input-icon cf-icon cf-icon-delete-round" role="alert"></span>
            This is a required question, please answer.
        </label>
    tags:
    - cf-forms
*/

@cf-forms_input-icon-class: cf-form_input-icon;

.@{cf-forms_input-icon-class} {
    @font-size: 20px;
    font-size: unit(@font-size / @base-font-size-px, em);
}

.form-label-error .@{cf-forms_input-icon-class} {
    color: @input-error;
}

.error + .@{cf-forms_input-icon-class} {
    color: @input-error;
}

.warning + .@{cf-forms_input-icon-class} {
    color: @input-warning;
}

.success + .@{cf-forms_input-icon-class} {
    color: @input-success;
}

/* topdoc
  name: Form group
  family: cf-forms
  notes:
    - "A form group is recommended when you need to provide spacing between form
       elements and between groups of form elements."
  codenotes:
    - |
      Pattern structure
      -----------------
      .form-group
        .form-group_item
  patterns:
    - name: .form-group (block)
      markup: |
        <div class="form-group">
            <div class="form-group_item">
                <input type="text" title="Test input">
            </div>
            <div class="form-group_item">
                <input type="text" title="Test input">
            </div>
        </div>
        <div class="form-group">
            <div class="form-group_item">
                <input type="text" title="Test input">
            </div>
            <div class="form-group_item">
                <input type="text" title="Test input">
            </div>
        </div>
        <div class="form-group">
            <div class="form-group_item">
                <input type="text" title="Test input">
            </div>
            <div class="form-group_item">
                <input type="text" title="Test input">
            </div>
        </div>
      codenotes:
        - |
          .form-group
      notes:
        - "Provides sizeable margins between groups of form elements."
    - name: .form-group_item (element)
      markup: |
        <div class="form-group_item">
            <input type="text" title="Test input">
        </div>
        <div class="form-group_item">
            <input type="text" title="Test input">
        </div>
        <div class="form-group_item">
            <input type="text" title="Test input">
        </div>
      notes:
        - "Provides subtle margins between form elements within the same group."
    - name: Real world example
      markup: |
        <div class="form-group">
            <label class="form-label-header">Form group</label>
            <div class="form-group_item">
                <input type="text" value="Form group item" title="Test input">
            </div>
            <div class="form-group_item">
                <input type="text" value="Form group item" title="Test input">
            </div>
        </div>
        <div class="form-group">
            <label class="form-label-header">Form group</label>
            <div class="form-group_item">
                <input type="text" value="Form group item" title="Test input">
            </div>
            <div class="form-group_item">
                <input type="text" value="Form group item" title="Test input">
            </div>
        </div>
  tags:
    - cf-forms
*/

.form-group + .form-group {
    margin-top: unit(30px / @base-font-size-px, em);
}

.form-group_item + .form-group_item {
    margin-top: unit(15px / @base-font-size-px, em);
}


/* topdoc
  name: Input with button
  family: cf-forms
  patterns:
    - name: Default input and button
      markup: |
        <div class="input-with-btn">
            <div class="input-with-btn_input">
                <input type="text" title="Test input">
            </div>
            <div class="input-with-btn_btn">
                <button class="btn">Search</button>
            </div>
        </div>
    - name: Super input and button
      markup: |
        <div class="input-with-btn">
            <div class="input-with-btn_input">
                <input class="input__super" type="text" title="Test input">
            </div>
            <div class="input-with-btn_btn">
                <button class="btn btn__super">Search</button>
            </div>
        </div>
  tags:
    - cf-forms
*/

.input-with-btn {

    .respond-to-min(480px, {
        .grid_nested-col-group();
    });

    &_input {
        margin-bottom: unit(15px / @base-font-size-px, em);
        .respond-to-min(480px, {
            .grid_column(9);
            border-right-width: 0;
        });
        .respond-to-min(960px, {
            .grid_column(10);
            border-right-width: 0;
        });

        input {
            box-sizing: border-box;
            width: 100%;
        }
    }

    &_btn {
        margin-bottom: unit(15px / @base-font-size-px, em);

        .respond-to-min(480px, {
            .grid_column(3);
        });
        .respond-to-min(960px, {
            .grid_column(2);
        });

        .btn {
            box-sizing: border-box;
            width: 100%;
        }

        .btn__super {
            padding-left: unit(15px / @super-btn-font-size, em);
            padding-right: unit(15px / @super-btn-font-size, em);
        }
    }

}


/* topdoc
  name: Button inside input
  family: cf-forms
  patterns:
    - name: Default button inside of an default input
      markup: |
        <div class="btn-inside-input">
            <input type="text"
                   value="This is some really long text to make sure that the button doesn't overlap the content in such a way that this input becomes unusable." title="Test input">
            <button class="btn btn__link btn__secondary">
                Clear
                <span class="cf-icon cf-icon-delete"></span>
            </button>
        </div>
    - name: Super button inside of a super input
      markup: |
        <div class="btn-inside-input">
            <input class="input__super"
                   type="text"
                   value="This is some really long text to make sure that the button doesn't overlap the content in such a way that this input becomes unusable." title="Test input">
            <button class="btn btn__super btn__link btn__secondary">
                Clear
                <span class="cf-icon cf-icon-delete"></span>
            </button>
        </div>
  tags:
    - cf-forms
*/

.btn-inside-input {

    position: relative;

    input[type="text"],
    input[type="search"],
    input[type="email"],
    input[type="url"],
    input[type="tel"],
    input[type="number"] {
        box-sizing: border-box;
        width: 100%;
        padding-right: unit(65px / @btn-font-size, em);

        &.input__super {
            padding-right: unit(90px / @super-btn-font-size, em);
        }
    }

    .btn {
        .u-link__no-border();
        position: absolute;
        right: unit(15px / @btn-font-size, em);
        top: 0;

        &__super {
            right: unit(15px / @super-btn-font-size, em);
        }

        /* pa11y fails unless the background color is explicitly set */
        &__link.btn__secondary {
            background-color: #fff;
        }
    }

}

/* topdoc
  name: Notifications
  family: cf-notifications
  notes:
    - "Markup and styling for notifications"
  patterns:
    - name: Default Usage
      markup: |
        <div class="cf-notification cf-notification__error">
          <span class="cf-notification_icon cf-notification_icon__error cf-icon cf-icon-error-round"></span>
          <p class="cf-notification_text">This is the default alert.</p>
        </div>
  tags:
    - cfgov-misc
*/

@notification-padding__px: 11px;

.cf-notification {
    display: none;
    position: relative;

    padding: @notification-padding__px;
    padding-left: 40px;
    margin-bottom: @notification-padding__px + 4px;

    background: @gray-20;
    border: 1px solid @gray;

    &__visible {
      display: block;
    }

    &__error {
        background: @redorange-20;
        border-color: @input-error;
    }

    &__success {
        background: @green-tint;
        border-color: @input-success;
    }

    &__warning {
        background: @gold-20;
        border-color: @input-warning;
    }

    &_icon {
        position: absolute;
        top: @notification-padding__px + 2px;
        left: @notification-padding__px + 4px;

        color: @gray-20;
        font-size: unit( 18px / @base-font-size-px, em );

        &__error {
            color: #d14327;
        }

        &__success {
            color: #2cb34a;
        }

        &__warning {
            color: #ff931b;
        }
    }

    &_text {
        .h4();
        margin: 0;

        .short-desc {
            display: block;
            font-size: @base-font-size-px;

        }
    }
}

/* topdoc
  name: Custom checkboxes and radio buttons via jquery.custom-input
  family: cfgov-forms
  notes:
    - "This plugin auto-initiates and will transform your initial HTML by adding
      more markup and classes. If JavaScript is unavailable the new elements and
      classes won't be added and won't interfere with default input behavior."
    - "You MUST wrap your input.custom-input in a label."
    - "Remember to use 'for' and 'id' attributes. This will allow IE less
      than 8 to trigger the input on label click."
    - "JavaScript is used to add .is-hovered and .is-focused classes to
      .custom-input by detecting :hover and :focus on .custom-input."
    - "JavaScript is used to detect change events to the input. By clicking
      the label element you change the checked property and the plugin will
      add the .is-checked class."
  patterns:
    - name: Custom checkbox demo with initialization markup
      markup: |
        <label for="custom-input_checkbox-lorem">
            <input class="custom-input"
                   id="custom-input_checkbox-lorem"
                   type="checkbox"
                   name="checkboxes-styled"
                   value="lorem">
            Lorem
        </label>
        <br>
        <label for="custom-input_checkbox-ipsum">
            <input class="custom-input"
                   id="custom-input_checkbox-ipsum"
                   type="checkbox"
                   name="checkboxes-styled"
                   value="ipsum">
            Ipsum
        </label>
        <br>
        <label for="custom-input_checkbox-dolor">
            <input class="custom-input"
                   id="custom-input_checkbox-dolor"
                   type="checkbox"
                   name="checkboxes-styled"
                   value="dolor">
            Dolor
        </label>
      codenotes:
        - |
          Structural cheat sheet:
          -----------------------
          label
            input[type=checkbox].custom-input
      notes:
        - "Use the markup structure above to add .custom-input elements."
    - name: Custom radio button demo with initialization markup
      markup: |
        <label for="custom-input_radio-lorem">
            <input class="custom-input"
                   id="custom-input_radio-lorem"
                   type="radio"
                   name="radios-styled"
                   value="lorem">
            Lorem
        </label>
        <br>
        <label for="custom-input_radio-ipsum">
            <input class="custom-input"
                   id="custom-input_radio-ipsum"
                   type="radio"
                   name="radios-styled"
                   value="ipsum">
            Ipsum
        </label>
        <br>
        <label for="custom-input_radio-dolor">
            <input class="custom-input"
                   id="custom-input_radio-dolor"
                   type="radio"
                   name="radios-styled"
                   value="dolor">
            Dolor
        </label>
      codenotes:
        - |
          Structural cheat sheet:
          -----------------------
          label
            input[type=radio].custom-input
      notes:
        - "Use the markup structure above to add .custom-input elements."
    - name: JavaScript setup
      markup: |
        <script src="//code.jquery.com/jquery-1.11.0.min.js"></script>
        <script src="../../static/js/jquery.custom-input.js"></script>
  tags:
    - cfgov-forms
*/

.custom-input {

    @input-width-px: 20px;
    @input-width: unit(@input-width-px / @base-font-size-px, em);

    // Hide the real input by using absolute positioning to layer a styled div
    // over it.
    &_input {
        position: absolute;
            top: 4px;
            left: 4px;
        z-index: 0;
        // Use this to try and make the input as small as possible so that it
        // doesn't stick out from underneath .input_checkbox or .input_radio.
           -moz-appearance: none;
        -webkit-appearance: none;
    }

    // Hide the real input by using absolute positioning to layer a styled div
    // over it.
    &_checkbox,
    &_radio {
        box-sizing: border-box;
        position: absolute;
            top: 1px;
            left: 1px;
        z-index: 1;
        width: @input-width;
        height: @input-width;
        background: @input-bg;
        outline: 1px solid @checkbox-border;
    }
    &_radio {
        // IE older than 9 does not support border-radius so checkboxes and
        // radio buttons will look the same.
        border-radius: 100%;
        // box-shadow is being used instead of outline because outline
        // does not respect border-radius.
        outline: none;
        box-shadow: 0px 0px 0px 1px @checkbox-border;
        // Older IE does not support border-radius or box-shadow it's ok to
        // use outline here.
        .lt-ie9 & {
            outline: 1px solid @checkbox-border;
        }
    }


    &_label {
        position: relative;
        z-index: 2;
        padding-left: unit((@input-width-px + 2px) / @base-font-size-px, em);
        margin-right: unit(6 / @base-font-size-px, em);
        line-height: 1;
    }
    &_text {
        display: inline-block;
        // Eyeballed to 10px between the checkbox and the label text.
        padding-left: unit(8 / @base-font-size-px, em);
        line-height: unit((@input-width-px + 2px) / @base-font-size-px);
    }

    &_checkbox,
    &_radio {
        .is-hovered &,
        .is-focused & {
            border-color: @input-bg;
            outline: 2px solid @input-border-focus;
        }
        .is-checked & {
            background-color: @input-border-focus;
            border: 3px solid @input-bg;
            outline: 1px solid @input-border-focus;
        }
        .is-checked.is-hovered &,
        .is-checked.is-focused & {
            outline: 2px solid @input-border-focus;
        }
        .is-active & {
            background-color: @input-active-bg;
            border: 3px solid @input-bg;
        }
    }
    &_radio {
        .is-checked & {
            // box-shadow is being used instead of outline because outline
            // does not respect border-radius.
            outline: none;
            box-shadow: 0px 0px 0px 1px @input-border-focus;
            // Older IE does not support border-radius or box-shadow it's ok to
            // use outline here.
            .lt-ie9 & {
                outline: 1px solid @input-border-focus;
            }
        }
        .is-hovered &,
        .is-focused &,
        .is-checked.is-hovered &,
        .is-checked.is-focused & {
            // box-shadow is being used instead of outline because outline
            // does not respect border-radius.
            outline: none;
            box-shadow: 0px 0px 0px 2px @input-border-focus;
            // Older IE does not support border-radius or box-shadow it's ok to
            // use outline here.
            .lt-ie9 & {
                outline: 2px solid @input-border-focus;
            }
        }
        .is_disabled & {
          box-shadow: 0px 0px 0px 1px @checkbox-border-disabled;
          background-color: @checkbox-bg-disabled;
          // Older IE does not support border-radius or box-shadow it's ok to use outline here.
          .lt-ie9 & {
              outline: 1px solid @checkbox-border-disabled;
          }
        }
    }
}

// The .focus class is only included for documentation demos and should not be used in production.
input[type=checkbox].custom-input {
    position: relative;
    width: 20px;
    height: 20px;
    -webkit-appearance: none;
    background-color: white;
    border: 1px solid @checkbox-border;
    &:checked {
        border-color: @checkbox-checked-border;
        outline: 1px solid @checkbox-checked-border;
        .cf-icon();
        .cf-icon-approved();
        &:before {
            position: absolute;
            top: 1px;
            left: 2px;
        }
    }
    &:hover,
    &:focus,
    &.focus {
        border: 1px solid @input-border-focus;
        cursor: pointer;
    }
    &[disabled=true],
    &.disabled {
        border-color: @checkbox-border-disabled;
        background-color: @checkbox-bg-disabled;
    }
}

/* topdoc
  name: Form layouts
  family: cfgov-forms
  patterns:
    - name: Form columns
      markup: |
        <div class="form-l">
            <div class="form-l_col form-l_col-1-3">
                Form layout column 1
            </div>
            <div class="form-l_col form-l_col-1-3">
                Form layout column 2
            </div>
            <div class="form-l_col form-l_col-1-3">
                Form layout column 3
            </div>
        </div>
      codenotes:
        - |
          Structural cheat sheet:
          -----------------------
          .form-l
            .form-l_col.form-l_col-1-3
    - name: "Form layout modifier: flush"
      markup: |
        <div class="form-l form-l__flush">
            <div class="form-l_col form-l_col-1-3">
                Form layout column 1
            </div>
            <div class="form-l_col form-l_col-1-3">
                Form layout column 2
            </div>
            <div class="form-l_col form-l_col-1-3">
                Form layout column 3
            </div>
        </div>
      codenotes:
        - .form-l.form-l__flush
      notes:
        - "Form layout columns have left and right gutters. If you want the
          first and last column in each row to sit flush left/right
          respectively then use the .form-l__flush modifier."
    - name: Form layout columns
      codenotes:
        - .form-l_col
        - .form-l_col-1-3
      notes:
        - ".form-l_col-1-3 elements are stacked for small screens. When the
          viewport reaches 600px they transform into columns with one half the
          width of the container. When the viewport reaches 768px their width
          updates to one third of the container."
  tags:
    - cfgov-forms
*/

.form-l {
    &__flush {
        .respond-to-min(1060px, {
            .grid_nested-col-group();
        });
    }
    &__float {
        .respond-to-min(1060px, {
            .u-clearfix();
            & .form-l_col {
                display: block;
                float: left;
                margin-right: 0;
            }
        });
    }
}

.form-l_col {
    // Eyeballed to 30px considering line-height.
    margin-bottom: unit(30px / @base-font-size-px, em);
}

.form-l_col-1-2 {
    .respond-to-min(1060px, {
        .grid_column(6);
    });
}

.form-l_col-1-3 {
    .respond-to-min(1060px, {
        .grid_column(4);
    });
}

.form-l_col-2-3 {
    .respond-to-min(1060px, {
        .grid_column(8);
    });
}

.form-l_col-1 {
    .respond-to-min(1060px, {
        .grid_column(12);
    });
}

.form-l-inset {
    // The default margin between two columns is 30px.
    // The following rules shrink it to 5px for the insets.
    border-right-width: 2.5px;
    + .form-l-inset { border-left-width: 2.5px; }
    &:last-child { border-right-width: 15px; }

    .form-l-inset_container {
        padding: unit((@grid_gutter-width / 2) / @base-font-size-px, em)
                 unit((@grid_gutter-width / 2) / @base-font-size-px, em);
        background: @input-inset-bg;
        &.is-checked {
            background-color: @input-inset-selected;
            outline: 2px solid @input-border-focus;
        }
        &.is-hovered,
        &:hover,
        &:focus {
            cursor: pointer;
            outline: 2px solid @input-border-focus;
            label {
                cursor: pointer;
            }
        }
    }

}

/* topdoc
    name: Custom select menus via jquery.custom-input
    family: cfgov-forms
    patterns:
    - name: Custom select menu demo with initialization markup
      markup: |
        <div class="custom-select">
            <select class="custom-select_select">
                <option value="option1">Option 1</option>
                <option value="option2">Option 2</option>
                <option value="option3">Option 3</option>
                <option value="option4">Option 4</option>
            </select>
            <span class="custom-select_icon cf-icon cf-icon-down"></span>
            <span class="custom-select_text custom-select_placeholder">Please select</span>
        </div>
      codenotes:
        - |
          Structural cheat sheet:
          -----------------------
          .custom-select
            select.custom-select_select
              option
            .custom-select-icon
            .custom-select_text
      notes:
        - "Use the markup structure above to add .custom-select elements.
          It is meant to allow for cases where JavaScript is unavailable.
          The jQuery plugin transforms this initial HTML by adding more markup
          and classes. If JavaScript is unavailable the new elements and classes
          won't be added and won't interfere with default select behavior."
        - "JavaScript is used to add .is-hovered and .is-focused classes to
          .custom-select by detecting :hover and :focus on .custom-select."
        - "The jQuery plugin will auto intitiate all select elements that are
          wrapped in a parent with the class of custom-select."
    - name: .custom-select__month (modifier)
      markup: |
        <div class="custom-select custom-select__month">
            <select>
                <option value="">Month</option>
                <option value="01">Jan</option>
                <option value="02">Feb</option>
                <option value="03">Mar</option>
                <option value="04">Apr</option>
                <option value="05">May</option>
                <option value="06">Jun</option>
                <option value="07">Jul</option>
                <option value="08">Aug</option>
                <option value="09">Sep</option>
                <option value="10">Oct</option>
                <option value="11">Nov</option>
                <option value="12">Dec</option>
            </select>
            <span class="custom-select_icon cf-icon cf-icon-down"></span>
        </div>
      codenotes:
        - .custom-select__month
      notes:
        - "Simply sets a max-width appropriate for a month input."
    - name: .custom-select__year (modifier)
      markup: |
        <div class="custom-select custom-select__year">
            <select>
                <option value="">Year</option>
                <option value="2014">2014</option>
                <option value="2013">2013</option>
                <option value="2012">2012</option>
                <option value="2011">2011</option>
            </select>
            <span class="custom-select_icon cf-icon cf-icon-down"></span>
        </div>
      codenotes:
        - .custom-select__year
      notes:
        - "Simply sets a max-width appropriate for a year input."
    - name: JavaScript setup
      markup: |
        <script src="//code.jquery.com/jquery-1.11.0.min.js"></script>
        <script src="../../static/js/jquery.custom-select.js"></script>
      notes:
        - "The jQuery plugin will auto intitiate all select elements with the
          class of .custom-select and append the the .is-enabled class which
          activates the styling."
    tags:
    - cfgov-forms
*/

.custom-select {

    &.is-enabled {
        overflow: hidden;
        position: relative;
        min-height: unit((@base-line-height-px + (4px * 2)) / @base-font-size-px, em);
        // Since an input-group_item can overlap another we need to use z-index
        // is needed to allow the focused input to pop over unfocused inputs.
        z-index: 1;
        border: solid 1px @input-border;
        background: @input-bg;
    }

    &.disabled {
        background: @input-disabled;
    }

    &.is-hovered,
    &.is-focused {
        z-index: 2;
        border-color: @input-border-focus;
        outline: 1px solid @input-border-focus;
    }

    &_icon {
        // This element does not get added dynamically so it should be hidden
        // until JavaScript is enabled.
        display: none;
        position: absolute;
        top: 0;
        right: 0;
        z-index: 2;
        min-width: 1em;
        padding: unit( 4px / @base-font-size-px, em )
                 unit( 6px / @base-font-size-px, em );
        border-left: 1px solid @input-border;
        background: @input-disabled;
        color: @input-border;
        line-height: @base-line-height;
        text-align: center;
        .is-enabled & {
            display: inline-block;
        }
    }

    &_text {
        position: absolute;
        top: 0;
        left: 0;
        padding: unit( 4px / @base-font-size-px, em )
                 unit( 10px / @base-font-size-px, em );
        z-index: 1;
        font-family: Arial, sans-serif;
        line-height: @base-line-height;
        color: @text;
    }

    &_placeholder {
        color: @input-placeholder;
    }

    &_select {
        position: relative;
        // Push the native select arrow out of view
        width: 100%;
        max-height: unit((@base-line-height-px + (4px * 2)) / @base-font-size-px, em);
        padding: unit( 4px / @base-font-size-px, em );
        z-index: 3;
        // Customize the colors
        border: 0;
        border-radius: 0;
        background-color: transparent;
        background-image: none;
        color: @text;
        -webkit-appearance: none;
        box-shadow: none;

        .is-hovered &,
        .is-focused & {
            outline: none;
        }
        .is-enabled & {
            opacity: 0;
        }

    }

    &__month {
        max-width: unit(96px / @base-font-size-px, em);
    }

    &__year {
        max-width: unit(86px / @base-font-size-px, em);
    }
}

/* topdoc
  name: Range input
  family: cf-forms
  patterns:
    - name: Range slider input
      markup: |
        <label for="range-slider">Range Slider</label>
        <input id="range-slider" type="range" min="0" max="100">
  tags:
    - cf-forms
*/

input[type=range] {
    margin-top: 15px;
    -webkit-appearance: none;
    border: none;
    padding-left: 0;
    width: 100%;
    &::-webkit-slider-runnable-track {
        background: @input-range-bg;
        border: 1px solid @input-range-border;
        border-radius: 8px;
        cursor: pointer;
        height: 11px;
        width: 100%;
    }
    &::-moz-range-track {
        background: @input-range-bg;
        border: 1px solid @input-range-border;
        cursor: pointer;
        height: 11px;
        width: 100%;
    }
    &::-ms-track {
        background: transparent;
        color: transparent;
        cursor: pointer;
        height: 11px;
        width: 100%;
    }
    &::-webkit-slider-thumb {
        -webkit-appearance: none;
        border: 1px solid @input-range-border;
        height: 45px;
        border-radius: 50%;
        background: @input-range-handle;
        cursor: pointer;
        margin-top: -18px;  
        width: 45px;
    }
    &::-moz-range-thumb {
        background: @input-range-handle;
        border: 1px solid @input-range-border;
        border-radius: 50%;
        cursor: pointer;
        height: 45px;
        width: 45px;
    }
    &::-ms-thumb {
        background: @input-range-handle;
        border: 1px solid @input-range-border;
        border-radius: 50%;
        cursor: pointer;
        height: 45px;
        width: 45px;
    }
    &::-ms-fill-lower {
        background: @input-range-bg;
        border: 1px solid @input-range-border;
        border-radius: 2rem;
    }
    &::-ms-fill-upper {
        background: @input-range-bg;
        border: 1px solid @input-range-border;
        border-radius: 2rem;
    }
    &:focus,
    &.focus {
        box-shadow: none;
        outline: none;
        &::-webkit-slider-thumb {
            background: @input-inset-selected;
            border: 2px solid @input-border-focus;
        }

        &::-moz-range-thumb {
            background: @input-inset-selected;
            border: 2px solid @input-border-focus;
        }

        &::-ms-thumb {
            background: @input-inset-selected;
            border: 2px solid @input-border-focus;
        }
    }
}

/* topdoc
  name: EOF
  eof: true
*/
