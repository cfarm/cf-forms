@import (less) '../../cf-grid/src/cf-grid.less';
@import (less) '../../cf-core/src/cf-core.less';
@import (less) '../../cf-buttons/src/cf-buttons.less';
@import (less) '../../cf-icons/src/cf-icons.less';

/* ==========================================================================
   Capital Framework
   Form Element Styling
   ========================================================================== */

/* topdoc
  name: Theme variables
  family: cf-forms
  notes:
    - "The following color and sizing variables are exposed, allowing you to
       easily override them before compiling."
  patterns:
  - name: Colors
    codenotes:
      - |
        @input-error
        @input-warning
        @input-success
  - name: Sizing
    codenotes:
      - |
        @input__super-font-size
  tags:
  - cf-forms
  - less
*/

// Color variables

// .error
@input-error:                   #ea130b;

// warning
@input-warning:                 #ffb108;

// .success
@input-success:                 #009d38;

// Sizing variables

// .input__super
@input__super-font-size:        18px;


/* topdoc
  name: Form labels
  family: cf-forms
  patterns:
    - name: Label header
      markup: |
        <label class="form-label-header">
            Form label header
        </label>
  tags:
    - cf-forms
*/

.form-label-header {
    .h5();
    margin-bottom: unit(10px / @font-size, em);
}


/* topdoc
  name: Super input
  family: cf-forms
  patterns:
    - name: .input__super
      markup: |
        <input class="input__super" type="text" value="Super input" title="Test input"></input>
        <button class="btn btn__super">Super</button>
      notes:
        - "An input that matches the height of a super button."
  tags:
    - cf-forms
*/

.input__super {
    &[type="text"],
    &[type="search"],
    &[type="email"],
    &[type="url"],
    &[type="tel"],
    &[type="number"] {
        padding: unit( 10px / @input__super-font-size, em );
        font-size: unit( @input__super-font-size / @base-font-size-px, em );
    }
}


/* topdoc
    name: Input states
    family: cf-forms
    patterns:
    - name: Error state
      codenotes:
        - .error
      notes:
        - "See the 'Form icons' section below for guidance on adding icons to
           states."
      markup: |
        <input class="error" type="text" value="Invalid input" title="Test input">
    - name: Warning state
      codenotes:
        - .warning
      notes:
        - "See the 'Form icons' section below for guidance on adding icons to
           states."
      markup: |
        <input class="warning" type="text" value="Invalid input" title="Test input">
    - name: Success state
      codenotes:
        - .success
      notes:
        - "See the 'Form icons' section below for guidance on adding icons to
           states."
      markup: |
        <input class="success" type="text" value="Validated input" title="Test input">
    tags:
    - cf-forms
*/

input[type="text"],
input[type="search"],
input[type="email"],
input[type="url"],
input[type="tel"],
input[type="number"],
select[multiple],
textarea {
    &.error {
        border: 1px solid @input-error;
        outline: 1px solid @input-error;
    }
    &.warning {
        border: 1px solid @input-warning;
        outline: 1px solid @input-warning;
    }
    &.success {
        border: 1px solid @input-success;
        outline: 1px solid @input-success;
    }
}


/* topdoc
    name: Form icons
    family: cf-forms
    patterns:
    - name: Form input icons
      notes:
        - "Form input icons add small positioning tweaks to Capital Framework
          icons."
      markup: |
        <input type="text" value="" title="Test input">
        <span class="cf-form_input-icon cf-icon cf-icon-email"></span>
    - name: Form input error icon
      notes:
        - "The icon must be placed directly after the form input in the markup
          and the input must use the 'error' class."
        - "For invalid fields only use the alert role to call attention to
           fields that need immediate attention:
           https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_alert_role"
      markup: |
        <input class="error" type="text" value="Invalid input" title="Test input">
        <span class="cf-form_input-icon cf-icon cf-icon-delete-round" role="alert"></span>
    - name: Form input warning icon
      notes:
        - "The icon must be placed directly after the form input in the markup
          and the input must use the 'warning' class."
        - "For invalid fields only use the alert role to call attention to
           fields that need immediate attention:
           https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_alert_role"
      markup: |
        <input class="warning" type="text" value="Invalid input" title="Test input">
        <span class="cf-form_input-icon cf-icon cf-icon-error-round" role="alert"></span>
    - name: Form input success icon
      notes:
        - "The icon must be placed directly after the form input in the markup
          and the input must use the 'error' class."
        - "For valid inputs only use the alert role to indicate that a
           previously invalid input is now valid:
           https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_alert_role"
      markup: |
        <input class="success" type="text" value="Validated input" title="Test input">
        <span class="cf-form_input-icon cf-icon cf-icon-approved-round"></span>
    tags:
    - cf-forms
*/

@cf-forms_input-icon-class: cf-form_input-icon;

.@{cf-forms_input-icon-class} {
    @font-size: 20px;

    position: relative;
    top: unit(6px / @font-size, em);
    margin-left: unit(4px / @font-size, em);
    font-size: unit(@font-size / @base-font-size-px, em);
}

.error + .@{cf-forms_input-icon-class} {
    color: @input-error;
}

.warning + .@{cf-forms_input-icon-class} {
    color: @input-warning;
}

.success + .@{cf-forms_input-icon-class} {
    color: @input-success;
}


/* topdoc
  name: Form group
  family: cf-forms
  notes:
    - "A form group is recommended when you need to provide spacing between form
       elements and between groups of form elements."
  codenotes:
    - |
      Pattern structure
      -----------------
      .form-group
        .form-group_item
  patterns:
    - name: .form-group (block)
      markup: |
        <div class="form-group">
            <div class="form-group_item">
                <input type="text" title="Test input">
            </div>
            <div class="form-group_item">
                <input type="text" title="Test input">
            </div>
        </div>
        <div class="form-group">
            <div class="form-group_item">
                <input type="text" title="Test input">
            </div>
            <div class="form-group_item">
                <input type="text" title="Test input">
            </div>
        </div>
        <div class="form-group">
            <div class="form-group_item">
                <input type="text" title="Test input">
            </div>
            <div class="form-group_item">
                <input type="text" title="Test input">
            </div>
        </div>
      codenotes:
        - |
          .form-group
      notes:
        - "Provides sizeable margins between groups of form elements."
    - name: .form-group_item (element)
      markup: |
        <div class="form-group_item">
            <input type="text" title="Test input">
        </div>
        <div class="form-group_item">
            <input type="text" title="Test input">
        </div>
        <div class="form-group_item">
            <input type="text" title="Test input">
        </div>
      notes:
        - "Provides subtle margins between form elements within the same group."
    - name: Real world example
      markup: |
        <div class="form-group">
            <label class="form-label-header">Form group</label>
            <div class="form-group_item">
                <input type="text" value="Form group item" title="Test input">
            </div>
            <div class="form-group_item">
                <input type="text" value="Form group item" title="Test input">
            </div>
        </div>
        <div class="form-group">
            <label class="form-label-header">Form group</label>
            <div class="form-group_item">
                <input type="text" value="Form group item" title="Test input">
            </div>
            <div class="form-group_item">
                <input type="text" value="Form group item" title="Test input">
            </div>
        </div>
  tags:
    - cf-forms
*/

.form-group + .form-group {
    margin-top: unit(30px / @base-font-size-px, em);
}

.form-group_item + .form-group_item {
    margin-top: unit(15px / @base-font-size-px, em);
}


/* topdoc
  name: Input with button
  family: cf-forms
  patterns:
    - name: Default input and button
      markup: |
        <div class="input-with-btn">
            <div class="input-with-btn_input">
                <input type="text" title="Test input">
            </div>
            <div class="input-with-btn_btn">
                <button class="btn">Search</button>
            </div>
        </div>
    - name: Super input and button
      markup: |
        <div class="input-with-btn">
            <div class="input-with-btn_input">
                <input class="input__super" type="text" title="Test input">
            </div>
            <div class="input-with-btn_btn">
                <button class="btn btn__super">Search</button>
            </div>
        </div>
  tags:
    - cf-forms
*/

.input-with-btn {

    .respond-to-min(480px, {
        .grid_nested-col-group();
    });

    &_input {
        margin-bottom: unit(15px / @base-font-size-px, em);
        .respond-to-min(480px, {
            .grid_column(9);
            border-right-width: 0;
        });
        .respond-to-min(960px, {
            .grid_column(10);
            border-right-width: 0;
        });

        input {
            box-sizing: border-box;
            width: 100%;
        }
    }

    &_btn {
        margin-bottom: unit(15px / @base-font-size-px, em);

        .respond-to-min(480px, {
            .grid_column(3);
        });
        .respond-to-min(960px, {
            .grid_column(2);
        });

        .btn {
            box-sizing: border-box;
            width: 100%;
        }

        .btn__super {
            padding-left: unit(15px / @super-btn-font-size, em);
            padding-right: unit(15px / @super-btn-font-size, em);
        }
    }

}


/* topdoc
  name: Button inside input
  family: cf-forms
  patterns:
    - name: Default button inside of an default input
      markup: |
        <div class="btn-inside-input">
            <input type="text"
                   value="This is some really long text to make sure that the button doesn't overlap the content in such a way that this input becomes unusable." title="Test input">
            <button class="btn btn__link btn__secondary">
                Clear
                <span class="cf-icon cf-icon-delete"></span>
            </button>
        </div>
    - name: Super button inside of a super input
      markup: |
        <div class="btn-inside-input">
            <input class="input__super"
                   type="text"
                   value="This is some really long text to make sure that the button doesn't overlap the content in such a way that this input becomes unusable." title="Test input">
            <button class="btn btn__super btn__link btn__secondary">
                Clear
                <span class="cf-icon cf-icon-delete"></span>
            </button>
        </div>
  tags:
    - cf-forms
*/

.btn-inside-input {

    position: relative;

    input[type="text"],
    input[type="search"],
    input[type="email"],
    input[type="url"],
    input[type="tel"],
    input[type="number"] {
        box-sizing: border-box;
        width: 100%;
        padding-right: unit(65px / @btn-font-size, em);

        &.input__super {
            padding-right: unit(90px / @super-btn-font-size, em);
        }
    }

    .btn {
        .u-link__no-border();
        position: absolute;
        right: unit(15px / @btn-font-size, em);
        top: 0;

        &__super {
            right: unit(15px / @super-btn-font-size, em);
        }

        /* pa11y fails unless the background color is explicitly set */
        &__link.btn__secondary {
            background-color: #fff;
        }
    }

}

/* topdoc
  name: Custom checkboxes and radio buttons via jquery.custom-input
  family: cfgov-forms
  notes:
    - "This plugin auto-initiates and will transform your initial HTML by adding
      more markup and classes. If JavaScript is unavailable the new elements and
      classes won't be added and won't interfere with default input behavior."
    - "You MUST wrap your input.custom-input in a label."
    - "Remember to use 'for' and 'id' attributes. This will allow IE less
      than 8 to trigger the input on label click."
    - "JavaScript is used to add .is-hovered and .is-focused classes to
      .custom-input by detecting :hover and :focus on .custom-input."
    - "JavaScript is used to detect change events to the input. By clicking
      the label element you change the checked property and the plugin will
      add the .is-checked class."
  patterns:
    - name: Custom checkbox demo with initialization markup
      markup: |
        <label for="custom-input_checkbox-lorem">
            <input class="custom-input"
                   id="custom-input_checkbox-lorem"
                   type="checkbox"
                   name="checkboxes-styled"
                   value="lorem">
            Lorem
        </label>
        <br>
        <label for="custom-input_checkbox-ipsum">
            <input class="custom-input"
                   id="custom-input_checkbox-ipsum"
                   type="checkbox"
                   name="checkboxes-styled"
                   value="ipsum">
            Ipsum
        </label>
        <br>
        <label for="custom-input_checkbox-dolor">
            <input class="custom-input"
                   id="custom-input_checkbox-dolor"
                   type="checkbox"
                   name="checkboxes-styled"
                   value="dolor">
            Dolor
        </label>
      codenotes:
        - |
          Structural cheat sheet:
          -----------------------
          label
            input[type=checkbox].custom-input
      notes:
        - "Use the markup structure above to add .custom-input elements."
    - name: Custom radio button demo with initialization markup
      markup: |
        <label for="custom-input_radio-lorem">
            <input class="custom-input"
                   id="custom-input_radio-lorem"
                   type="radio"
                   name="radios-styled"
                   value="lorem">
            Lorem
        </label>
        <br>
        <label for="custom-input_radio-ipsum">
            <input class="custom-input"
                   id="custom-input_radio-ipsum"
                   type="radio"
                   name="radios-styled"
                   value="ipsum">
            Ipsum
        </label>
        <br>
        <label for="custom-input_radio-dolor">
            <input class="custom-input"
                   id="custom-input_radio-dolor"
                   type="radio"
                   name="radios-styled"
                   value="dolor">
            Dolor
        </label>
      codenotes:
        - |
          Structural cheat sheet:
          -----------------------
          label
            input[type=radio].custom-input
      notes:
        - "Use the markup structure above to add .custom-input elements."
    - name: JavaScript setup
      markup: |
        <script src="//code.jquery.com/jquery-1.11.0.min.js"></script>
        <script src="../../static/js/jquery.custom-input.js"></script>
  tags:
    - cfgov-forms
*/

.custom-input {

    @input-width-px: 20px;
    @input-width: unit(@input-width-px / @base-font-size-px, em);

    // Hide the real input by using absolute positioning to layer a styled div
    // over it.
    &_input {
        position: absolute;
            top: 4px;
            left: 4px;
        z-index: 0;
        // Use this to try and make the input as small as possible so that it
        // doesn't stick out from underneath .input_checkbox or .input_radio.
           -moz-appearance: none;
        -webkit-appearance: none;
    }

    // Hide the real input by using absolute positioning to layer a styled div
    // over it.
    &_checkbox,
    &_radio {
        box-sizing: border-box;
        position: absolute;
            top: 1px;
            left: 1px;
        z-index: 1;
        width: @input-width;
        height: @input-width;
        background: @white;
        outline: 1px solid @gray-80;
    }
    &_radio {
        // IE older than 9 does not support border-radius so checkboxes and
        // radio buttons will look the same.
        border-radius: 100%;
        // box-shadow is being used instead of outline because outline
        // does not respect border-radius.
        outline: none;
        box-shadow: 0px 0px 0px 1px @gray-80;
        // Older IE does not support border-radius or box-shadow it's ok to
        // use outline here.
        .lt-ie9 & {
            outline: 1px solid @gray-80;
        }
    }


    &_label {
        position: relative;
        z-index: 2;
        padding-left: unit((@input-width-px + 2px) / @base-font-size-px, em);
        margin-right: unit(6 / @base-font-size-px, em);
        line-height: 1;
    }
    &_text {
        display: inline-block;
        // Eyeballed to 10px between the checkbox and the label text.
        padding-left: unit(8 / @base-font-size-px, em);
        line-height: unit((@input-width-px + 2px) / @base-font-size-px);
    }

    &_checkbox,
    &_radio {
        .is-hovered &,
        .is-focused & {
            border-color: @white;
            outline: 2px solid @pacific;
        }
        .is-checked & {
            background-color: @pacific;
            border: 3px solid @white;
            outline: 1px solid @pacific;
        }
        .is-checked.is-hovered &,
        .is-checked.is-focused & {
            outline: 2px solid @pacific;
        }
        .is-active & {
            background-color: @pacific-50;
            border: 3px solid @white;
        }
    }
    &_radio {
        .is-checked & {
            // box-shadow is being used instead of outline because outline
            // does not respect border-radius.
            outline: none;
            box-shadow: 0px 0px 0px 1px @pacific;
            // Older IE does not support border-radius or box-shadow it's ok to
            // use outline here.
            .lt-ie9 & {
                outline: 1px solid @pacific;
            }
        }
        .is-hovered &,
        .is-focused &,
        .is-checked.is-hovered &,
        .is-checked.is-focused & {
            // box-shadow is being used instead of outline because outline
            // does not respect border-radius.
            outline: none;
            box-shadow: 0px 0px 0px 2px @pacific;
            // Older IE does not support border-radius or box-shadow it's ok to
            // use outline here.
            .lt-ie9 & {
                outline: 2px solid @pacific;
            }
        }
        .is_disabled & {
          box-shadow: 0px 0px 0px 1px #babbbd;
          background-color: #75787b;
          // Older IE does not support border-radius or box-shadow it's ok to use outline here.
          .lt-ie9 & {
              outline: 1px solid #babbbd;
          }
        }
    }
}

// The .focus class is only included for documentation demos and should not be used in production.
input[type=checkbox].custom-input {
    position: relative;
    width: 20px;
    height: 20px;
    -webkit-appearance: none;
    background-color: white;
    border: 1px solid #919395;
    &:checked {
        border-color: @darkgray;
        outline: 1px solid @darkgray;
        .cf-icon();
        .cf-icon-approved();
        &:before {
            position: absolute;
            top: 1px;
            left: 2px;
        }
    }
    &:hover,
    &:focus,
    &.focus {
        border: 1px solid @input-border-focus;
        cursor: pointer;
    }
    &[disabled=true],
    &.disabled {
        border-color: #babbbd;
        background-color: #75787b;
    }
}


/* topdoc
  name: EOF
  eof: true
*/
